name: CI/CD Pipeline

on:
  push:
    branches: [master]

jobs:
  build-test-analyze-deploy:
    name: Build, Test, Analyze, and Deploy
    runs-on: ubuntu-latest

    env:
      SONAR_HOST_URL: http://localhost:9001
      SONAR_PROJECT_KEY: NotaBene
      SONAR_LOGIN: ${{ secrets.SONAR_TOKEN }}
      DOCKER_IMAGE: buck2412/notabene
      REGISTRY_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      REGISTRY_PASS: ${{ secrets.DOCKERHUB_TOKEN }}

    services:
      mongo:
        image: mongo:6.0
        ports:
          - 27017:27017

      # sonarqube:
      #   image: sonarqube:9.9-community
      #   ports:
      #     - 9001:9000
      #   env:
      #     SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
      #   options: >-
      #     --health-cmd="curl -f http://localhost:9000/api/system/status || exit 1"
      #     --health-interval=20s
      #     --health-timeout=10s
      #     --health-retries=3
      #     -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      #     --memory=4096M

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: maven-${{ hashFiles('**/pom.xml') }}

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: npm-${{ hashFiles('**/package-lock.json') }}

      - name: Make Maven wrapper executable
        run: chmod +x ./mvnw

      - name: Install dependencies
        run: |
          npm install
          ./mvnw frontend:install-node-and-npm frontend:npm install

      - name: Run backend tests & build
        run: ./mvnw clean verify -Pprod

      # - name: SonarQube Analysis
      #   run: |
      #     ./mvnw sonar:sonar \
      #       -Dsonar.projectKey=$SONAR_PROJECT_KEY \
      #       -Dsonar.host.url=$SONAR_HOST_URL \
      #       -Dsonar.login=$SONAR_LOGIN

      - name: Build Docker image
        run: |
          docker build -t $DOCKER_IMAGE:${{ github.sha }} -f src/main/docker/Dockerfile .
          docker tag $DOCKER_IMAGE:${{ github.sha }} $DOCKER_IMAGE:latest

      - name: Login to DockerHub
        run: echo "$REGISTRY_PASS" | docker login -u "$REGISTRY_USER" --password-stdin

      - name: Push Docker image
        run: |
          docker push $DOCKER_IMAGE:${{ github.sha }}
          docker push $DOCKER_IMAGE:latest
